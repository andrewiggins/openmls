import { test } from "uvu";
import * as assert from "uvu/assert";
import { format } from "prettier";

import { entities, parseRegisterClientRequest } from "../src/messages.js";

const payloadRegisterClientRequest = new Uint8Array([
	0, 0, 3, 171, 32, 220, 34, 89, 96, 237, 250, 1, 131, 164, 173, 246, 167, 169,
	190, 72, 149, 231, 39, 236, 89, 50, 74, 80, 252, 112, 255, 66, 121, 230, 213,
	22, 111, 0, 1, 0, 1, 32, 214, 138, 99, 123, 72, 14, 136, 243, 43, 71, 169, 46,
	162, 159, 138, 58, 84, 46, 131, 255, 221, 93, 58, 161, 147, 37, 169, 119, 73,
	176, 70, 120, 32, 193, 138, 240, 249, 11, 205, 160, 75, 24, 4, 206, 89, 59,
	211, 11, 123, 179, 138, 71, 50, 165, 96, 184, 114, 63, 168, 252, 222, 50, 146,
	162, 118, 32, 63, 191, 196, 169, 148, 78, 253, 227, 175, 226, 253, 168, 147,
	121, 11, 226, 198, 135, 131, 32, 251, 224, 28, 162, 188, 166, 68, 116, 56,
	132, 50, 248, 0, 1, 6, 116, 101, 115, 116, 45, 49, 2, 0, 1, 8, 0, 1, 0, 2, 0,
	3, 0, 77, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 103, 95, 144, 208, 0, 0, 0, 0, 103,
	206, 92, 224, 0, 64, 64, 24, 118, 15, 124, 23, 98, 83, 49, 65, 135, 113, 96,
	242, 50, 16, 48, 234, 65, 22, 192, 109, 240, 219, 115, 162, 236, 15, 201, 207,
	161, 8, 101, 158, 108, 142, 120, 92, 157, 161, 65, 17, 217, 59, 209, 136, 231,
	150, 148, 180, 227, 139, 127, 27, 144, 84, 177, 148, 191, 7, 171, 67, 215,
	162, 1, 0, 64, 64, 195, 201, 163, 168, 188, 232, 105, 157, 195, 93, 104, 30,
	13, 199, 57, 113, 152, 135, 228, 87, 169, 197, 148, 39, 116, 50, 13, 55, 53,
	22, 115, 135, 168, 93, 61, 213, 217, 114, 127, 132, 165, 140, 11, 111, 38, 35,
	24, 216, 36, 85, 176, 243, 23, 41, 125, 64, 219, 68, 198, 170, 173, 44, 142,
	5, 32, 158, 104, 64, 88, 195, 26, 142, 93, 60, 181, 100, 33, 90, 91, 17, 254,
	10, 177, 74, 91, 242, 175, 192, 1, 161, 4, 197, 35, 154, 212, 60, 245, 0, 1,
	0, 1, 32, 253, 252, 140, 74, 8, 94, 46, 239, 78, 61, 203, 6, 206, 246, 232,
	21, 11, 236, 159, 138, 44, 42, 111, 182, 36, 132, 185, 131, 78, 91, 126, 127,
	32, 244, 5, 180, 235, 76, 170, 86, 78, 217, 143, 124, 197, 4, 216, 236, 23,
	212, 20, 70, 110, 88, 95, 194, 238, 56, 118, 200, 78, 88, 114, 102, 47, 32,
	63, 191, 196, 169, 148, 78, 253, 227, 175, 226, 253, 168, 147, 121, 11, 226,
	198, 135, 131, 32, 251, 224, 28, 162, 188, 166, 68, 116, 56, 132, 50, 248, 0,
	1, 6, 116, 101, 115, 116, 45, 49, 2, 0, 1, 8, 0, 1, 0, 2, 0, 3, 0, 77, 0, 0,
	2, 0, 1, 1, 0, 0, 0, 0, 103, 95, 144, 207, 0, 0, 0, 0, 103, 206, 92, 223, 0,
	64, 64, 147, 70, 173, 228, 31, 86, 226, 218, 69, 156, 63, 185, 15, 44, 59,
	216, 17, 39, 96, 36, 109, 36, 60, 45, 41, 71, 231, 188, 30, 38, 121, 95, 162,
	122, 50, 92, 0, 60, 51, 74, 3, 1, 116, 83, 227, 67, 226, 30, 151, 39, 25, 83,
	253, 184, 28, 42, 104, 59, 89, 58, 107, 247, 203, 11, 0, 64, 64, 253, 161,
	230, 187, 230, 82, 154, 64, 103, 145, 79, 103, 78, 126, 71, 30, 208, 150, 157,
	250, 183, 204, 255, 131, 131, 176, 200, 252, 137, 7, 88, 137, 251, 223, 212,
	254, 89, 16, 7, 17, 103, 174, 250, 138, 27, 114, 198, 234, 39, 178, 238, 34,
	98, 165, 5, 67, 142, 202, 153, 150, 60, 216, 175, 7, 32, 2, 37, 182, 152, 182,
	204, 57, 124, 44, 58, 99, 106, 253, 146, 184, 182, 23, 96, 30, 72, 193, 173,
	18, 68, 79, 50, 175, 10, 29, 9, 66, 38, 0, 1, 0, 1, 32, 203, 18, 210, 251, 10,
	133, 159, 40, 199, 90, 145, 87, 137, 3, 82, 35, 157, 24, 8, 146, 69, 23, 122,
	240, 94, 182, 147, 64, 217, 103, 140, 87, 32, 137, 208, 195, 15, 188, 29, 158,
	161, 150, 97, 82, 80, 49, 238, 155, 141, 15, 0, 5, 217, 213, 198, 164, 222,
	18, 26, 238, 246, 246, 222, 252, 58, 32, 63, 191, 196, 169, 148, 78, 253, 227,
	175, 226, 253, 168, 147, 121, 11, 226, 198, 135, 131, 32, 251, 224, 28, 162,
	188, 166, 68, 116, 56, 132, 50, 248, 0, 1, 6, 116, 101, 115, 116, 45, 49, 2,
	0, 1, 8, 0, 1, 0, 2, 0, 3, 0, 77, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 103, 95, 144,
	208, 0, 0, 0, 0, 103, 206, 92, 224, 0, 64, 64, 143, 18, 64, 33, 43, 98, 253,
	180, 147, 181, 134, 29, 210, 156, 80, 2, 16, 121, 163, 17, 74, 116, 233, 220,
	11, 126, 116, 143, 233, 93, 34, 127, 8, 115, 189, 134, 42, 210, 165, 146, 87,
	120, 167, 241, 83, 57, 24, 166, 140, 243, 8, 147, 181, 22, 68, 34, 91, 7, 191,
	22, 240, 96, 197, 14, 0, 64, 64, 9, 135, 39, 37, 247, 213, 238, 236, 89, 201,
	244, 250, 26, 175, 246, 55, 193, 107, 64, 51, 209, 103, 87, 129, 237, 35, 142,
	150, 26, 171, 22, 102, 147, 57, 153, 102, 239, 179, 240, 141, 129, 68, 15,
	114, 205, 34, 144, 43, 253, 247, 137, 36, 134, 18, 226, 209, 194, 28, 119,
	251, 51, 229, 92, 4,
]);

const parsedRegisterClientRequest = {
	key_packages: {
		vec: [
			[
				{
					vec: [
						220, 34, 89, 96, 237, 250, 1, 131, 164, 173, 246, 167, 169, 190, 72,
						149, 231, 39, 236, 89, 50, 74, 80, 252, 112, 255, 66, 121, 230, 213,
						22, 111,
					],
				},
				{
					payload: {
						protocol_version: "Mls10",
						ciphersuite: "MLS_128_DHKEMX25519_AES128GCM_SHA256_Ed25519",
						init_key: {
							key: {
								vec: [
									214, 138, 99, 123, 72, 14, 136, 243, 43, 71, 169, 46, 162,
									159, 138, 58, 84, 46, 131, 255, 221, 93, 58, 161, 147, 37,
									169, 119, 73, 176, 70, 120,
								],
							},
						},
						leaf_node: {
							payload: {
								encryption_key: {
									key: {
										vec: [
											193, 138, 240, 249, 11, 205, 160, 75, 24, 4, 206, 89, 59,
											211, 11, 123, 179, 138, 71, 50, 165, 96, 184, 114, 63,
											168, 252, 222, 50, 146, 162, 118,
										],
									},
								},
								signature_key: {
									value: {
										vec: [
											63, 191, 196, 169, 148, 78, 253, 227, 175, 226, 253, 168,
											147, 121, 11, 226, 198, 135, 131, 32, 251, 224, 28, 162,
											188, 166, 68, 116, 56, 132, 50, 248,
										],
									},
								},
								credential: {
									credential_type: "Basic",
									serialized_credential_content: {
										vec: [116, 101, 115, 116, 45, 49],
									},
								},
								capabilities: {
									versions: ["Mls10"],
									ciphersuites: [1, 2, 3, 77],
									extensions: [],
									proposals: [],
									credentials: ["Basic"],
								},
								leaf_node_source: {
									KeyPackage: {
										not_before: 1734316240,
										not_after: 1741577440,
									},
								},
								extensions: {
									unique: [],
								},
							},
							signature: {
								value: {
									vec: [
										24, 118, 15, 124, 23, 98, 83, 49, 65, 135, 113, 96, 242, 50,
										16, 48, 234, 65, 22, 192, 109, 240, 219, 115, 162, 236, 15,
										201, 207, 161, 8, 101, 158, 108, 142, 120, 92, 157, 161, 65,
										17, 217, 59, 209, 136, 231, 150, 148, 180, 227, 139, 127,
										27, 144, 84, 177, 148, 191, 7, 171, 67, 215, 162, 1,
									],
								},
							},
						},
						extensions: {
							unique: [],
						},
					},
					signature: {
						value: {
							vec: [
								195, 201, 163, 168, 188, 232, 105, 157, 195, 93, 104, 30, 13,
								199, 57, 113, 152, 135, 228, 87, 169, 197, 148, 39, 116, 50, 13,
								55, 53, 22, 115, 135, 168, 93, 61, 213, 217, 114, 127, 132, 165,
								140, 11, 111, 38, 35, 24, 216, 36, 85, 176, 243, 23, 41, 125,
								64, 219, 68, 198, 170, 173, 44, 142, 5,
							],
						},
					},
				},
			],
			[
				{
					vec: [
						158, 104, 64, 88, 195, 26, 142, 93, 60, 181, 100, 33, 90, 91, 17,
						254, 10, 177, 74, 91, 242, 175, 192, 1, 161, 4, 197, 35, 154, 212,
						60, 245,
					],
				},
				{
					payload: {
						protocol_version: "Mls10",
						ciphersuite: "MLS_128_DHKEMX25519_AES128GCM_SHA256_Ed25519",
						init_key: {
							key: {
								vec: [
									253, 252, 140, 74, 8, 94, 46, 239, 78, 61, 203, 6, 206, 246,
									232, 21, 11, 236, 159, 138, 44, 42, 111, 182, 36, 132, 185,
									131, 78, 91, 126, 127,
								],
							},
						},
						leaf_node: {
							payload: {
								encryption_key: {
									key: {
										vec: [
											244, 5, 180, 235, 76, 170, 86, 78, 217, 143, 124, 197, 4,
											216, 236, 23, 212, 20, 70, 110, 88, 95, 194, 238, 56, 118,
											200, 78, 88, 114, 102, 47,
										],
									},
								},
								signature_key: {
									value: {
										vec: [
											63, 191, 196, 169, 148, 78, 253, 227, 175, 226, 253, 168,
											147, 121, 11, 226, 198, 135, 131, 32, 251, 224, 28, 162,
											188, 166, 68, 116, 56, 132, 50, 248,
										],
									},
								},
								credential: {
									credential_type: "Basic",
									serialized_credential_content: {
										vec: [116, 101, 115, 116, 45, 49],
									},
								},
								capabilities: {
									versions: ["Mls10"],
									ciphersuites: [1, 2, 3, 77],
									extensions: [],
									proposals: [],
									credentials: ["Basic"],
								},
								leaf_node_source: {
									KeyPackage: {
										not_before: 1734316239,
										not_after: 1741577439,
									},
								},
								extensions: {
									unique: [],
								},
							},
							signature: {
								value: {
									vec: [
										147, 70, 173, 228, 31, 86, 226, 218, 69, 156, 63, 185, 15,
										44, 59, 216, 17, 39, 96, 36, 109, 36, 60, 45, 41, 71, 231,
										188, 30, 38, 121, 95, 162, 122, 50, 92, 0, 60, 51, 74, 3, 1,
										116, 83, 227, 67, 226, 30, 151, 39, 25, 83, 253, 184, 28,
										42, 104, 59, 89, 58, 107, 247, 203, 11,
									],
								},
							},
						},
						extensions: {
							unique: [],
						},
					},
					signature: {
						value: {
							vec: [
								253, 161, 230, 187, 230, 82, 154, 64, 103, 145, 79, 103, 78,
								126, 71, 30, 208, 150, 157, 250, 183, 204, 255, 131, 131, 176,
								200, 252, 137, 7, 88, 137, 251, 223, 212, 254, 89, 16, 7, 17,
								103, 174, 250, 138, 27, 114, 198, 234, 39, 178, 238, 34, 98,
								165, 5, 67, 142, 202, 153, 150, 60, 216, 175, 7,
							],
						},
					},
				},
			],
			[
				{
					vec: [
						2, 37, 182, 152, 182, 204, 57, 124, 44, 58, 99, 106, 253, 146, 184,
						182, 23, 96, 30, 72, 193, 173, 18, 68, 79, 50, 175, 10, 29, 9, 66,
						38,
					],
				},
				{
					payload: {
						protocol_version: "Mls10",
						ciphersuite: "MLS_128_DHKEMX25519_AES128GCM_SHA256_Ed25519",
						init_key: {
							key: {
								vec: [
									203, 18, 210, 251, 10, 133, 159, 40, 199, 90, 145, 87, 137, 3,
									82, 35, 157, 24, 8, 146, 69, 23, 122, 240, 94, 182, 147, 64,
									217, 103, 140, 87,
								],
							},
						},
						leaf_node: {
							payload: {
								encryption_key: {
									key: {
										vec: [
											137, 208, 195, 15, 188, 29, 158, 161, 150, 97, 82, 80, 49,
											238, 155, 141, 15, 0, 5, 217, 213, 198, 164, 222, 18, 26,
											238, 246, 246, 222, 252, 58,
										],
									},
								},
								signature_key: {
									value: {
										vec: [
											63, 191, 196, 169, 148, 78, 253, 227, 175, 226, 253, 168,
											147, 121, 11, 226, 198, 135, 131, 32, 251, 224, 28, 162,
											188, 166, 68, 116, 56, 132, 50, 248,
										],
									},
								},
								credential: {
									credential_type: "Basic",
									serialized_credential_content: {
										vec: [116, 101, 115, 116, 45, 49],
									},
								},
								capabilities: {
									versions: ["Mls10"],
									ciphersuites: [1, 2, 3, 77],
									extensions: [],
									proposals: [],
									credentials: ["Basic"],
								},
								leaf_node_source: {
									KeyPackage: {
										not_before: 1734316240,
										not_after: 1741577440,
									},
								},
								extensions: {
									unique: [],
								},
							},
							signature: {
								value: {
									vec: [
										143, 18, 64, 33, 43, 98, 253, 180, 147, 181, 134, 29, 210,
										156, 80, 2, 16, 121, 163, 17, 74, 116, 233, 220, 11, 126,
										116, 143, 233, 93, 34, 127, 8, 115, 189, 134, 42, 210, 165,
										146, 87, 120, 167, 241, 83, 57, 24, 166, 140, 243, 8, 147,
										181, 22, 68, 34, 91, 7, 191, 22, 240, 96, 197, 14,
									],
								},
							},
						},
						extensions: {
							unique: [],
						},
					},
					signature: {
						value: {
							vec: [
								9, 135, 39, 37, 247, 213, 238, 236, 89, 201, 244, 250, 26, 175,
								246, 55, 193, 107, 64, 51, 209, 103, 87, 129, 237, 35, 142, 150,
								26, 171, 22, 102, 147, 57, 153, 102, 239, 179, 240, 141, 129,
								68, 15, 114, 205, 34, 144, 43, 253, 247, 137, 36, 134, 18, 226,
								209, 194, 28, 119, 251, 51, 229, 92, 4,
							],
						},
					},
				},
			],
		],
	},
};

const formatJSON = (o: any) => format(JSON.stringify(o), { parser: "json" });
test("parseRegisterClientRequest", async () => {
	try {
		parseRegisterClientRequest(payloadRegisterClientRequest);
	} catch (e) {
		const kps = parsedRegisterClientRequest.key_packages.vec;
		const expectedEntities = [
			kps[0][0].vec,
			kps[0][1].payload?.protocol_version,
			kps[0][1].payload?.ciphersuite,
			kps[0][1].payload?.init_key?.key?.vec,
			kps[0][1].payload?.leaf_node?.payload?.encryption_key?.key?.vec,
			kps[0][1].payload?.leaf_node?.payload?.signature_key?.value?.vec,
			kps[0][1].payload?.leaf_node?.payload?.credential,
			kps[0][1].payload?.leaf_node?.payload?.capabilities,
			// kps[0][1].payload?.leaf_node?.payload?.capabilities?.versions,
			// kps[0][1].payload?.leaf_node?.payload?.capabilities?.ciphersuites,
			// kps[0][1].payload?.leaf_node?.payload?.capabilities?.extensions,
			// kps[0][1].payload?.leaf_node?.payload?.capabilities?.proposals,
			// kps[0][1].payload?.leaf_node?.payload?.capabilities?.credentials,
			// kps[0][1].payload?.leaf_node?.payload?.leaf_node_source?.KeyPackage
			// 	?.not_before,
			// kps[0][1].payload?.leaf_node?.payload?.leaf_node_source?.KeyPackage
			// 	?.not_after,
			// kps[0][1].payload?.leaf_node?.payload?.extensions?.unique,
			// kps[0][1].signature?.value?.vec,
			//
			// Second key package
			//
			// kps[1][0].vec,
			// kps[1][1].payload?.protocol_version,
			// kps[1][1].payload?.ciphersuite,
			// kps[1][1].payload?.init_key?.key?.vec,
			// kps[1][1].payload?.leaf_node?.payload?.encryption_key?.key?.vec,
			// kps[1][1].payload?.leaf_node?.payload?.signature_key?.value?.vec,
			// kps[1][1].payload?.leaf_node?.payload?.credential?.credential_type,
			// kps[1][1].payload?.leaf_node?.payload?.credential
			// 	?.serialized_credential_content?.vec,
			// kps[1][1].payload?.leaf_node?.payload?.capabilities?.versions,
			// kps[1][1].payload?.leaf_node?.payload?.capabilities?.ciphersuites,
			// kps[1][1].payload?.leaf_node?.payload?.capabilities?.extensions,
			// kps[1][1].payload?.leaf_node?.payload?.capabilities?.proposals,
			// kps[1][1].payload?.leaf_node?.payload?.capabilities?.credentials,
			// kps[1][1].payload?.leaf_node?.payload?.leaf_node_source?.KeyPackage
			// 	?.not_before,
		];

		assert.fixture(
			await formatJSON(entities),
			await formatJSON(expectedEntities),
		);
	}
});

test.run();
